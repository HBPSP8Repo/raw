package raw.rest

import java.io.{PrintWriter, StringWriter}
import java.nio.file.{DirectoryNotEmptyException, Files, Path, Paths}

import akka.actor.ActorSystem
import com.fasterxml.jackson.annotation.JsonInclude.Include
import com.fasterxml.jackson.databind.{ObjectMapper, SerializationFeature}
import com.fasterxml.jackson.module.scala.DefaultScalaModule
import com.typesafe.config.{ConfigException, ConfigFactory}
import com.typesafe.scalalogging.StrictLogging
import org.apache.spark.SparkContext
import org.rogach.scallop.{ScallopConf, ScallopOption}
import raw._
import raw.executor._
import raw.spark._
import spray.can.Http.Bound
import spray.http.{MediaTypes, StatusCodes}
import spray.routing.{ExceptionHandler, SimpleRoutingApp}
import spray.util.LoggingContext

import scala.concurrent.Future

/* Object mapper used to read/write any JSON received/sent by the rest server */
object DefaultJsonMapper extends StrictLogging {
  val mapper = {
    val om = new ObjectMapper()
    om.registerModule(DefaultScalaModule)
    om.configure(SerializationFeature.INDENT_OUTPUT, true)
    //    om.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true)
    om.setSerializationInclusion(Include.ALWAYS)
    om
  }
}


/* Generic exception, which the request handler code can raise to send a 400 response to the client. 
* This exception will be caught by the exception handler below and transformed in a 400 response*/
class ClientErrorException(msg: String) extends Exception(msg)

object RawRestServer {

  import DefaultJsonMapper._

  final val port = 54321


  //  POST /query HTTP/1.1
  //  Host: localhost:54321
  //  Connection: keep-alive
  //  Content-Length: 94
  //  Origin: http://localhost:5000
  //  User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36
  //  Accept: */*
  //  Referer: http://localhost:5000/static/index.html
  //  Accept-Encoding: gzip, deflate
  //  Accept-Language: en-US,en;q=0.8,de;q=0.6,pt;q=0.4
  //
  //  {"query":"array2d","token":"597g_VAPJEEAAAAAAAAl2XT8b48WXOFgMPVyJu1lDlKy7cSfXZKhlfxIU_cUWWTo"}

  case class QueryRequest(query: String, token: String)

  val queryRequestReader = mapper.readerFor(classOf[QueryRequest])

  case class SchemaRequest(module: String, token: String)

  val schemaRequestReader = mapper.readerFor(classOf[SchemaRequest])

  case class RegisterFileRequest(protocol: String, url: String, filename: String, name: String, `type`: String, token: String)

  val registerRequestReader = mapper.readerFor(classOf[RegisterFileRequest])

  // Response sent when there is an error processing a query
  case class CompilationErrorResponse(errorType: String, error: QueryError)

  // Response sent when the handler code raises an exception
  case class ExceptionResponse(exceptionType: String, message: String, stackTrace: String)

}

import spray.http.HttpHeaders._
import spray.http.HttpMethods._
import spray.http.{AllOrigins, HttpMethod, HttpMethods, HttpResponse}
import spray.routing._

// see also https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
trait CORSSupport {
  this: HttpService =>

  private val allowOriginHeader = `Access-Control-Allow-Origin`(AllOrigins)
  private val optionsCorsHeaders = List(
    `Access-Control-Allow-Headers`("Origin, X-Requested-With, Content-Type, Accept, Accept-Encoding, Accept-Language, Host, Referer, User-Agent"),
    `Access-Control-Max-Age`(1728000))

  def cors[T]: Directive0 = mapRequestContext { ctx => ctx.withRouteResponseHandling({
    //It is an option requeset for a resource that responds to some other method
    case Rejected(x) if (ctx.request.method.equals(HttpMethods.OPTIONS) && !x.filter(_.isInstanceOf[MethodRejection]).isEmpty) => {
      val allowedMethods: List[HttpMethod] = x.filter(_.isInstanceOf[MethodRejection]).map(rejection => {
        rejection.asInstanceOf[MethodRejection].supported
      })
      ctx.complete(HttpResponse().withHeaders(
        `Access-Control-Allow-Methods`(OPTIONS, allowedMethods: _*) :: allowOriginHeader ::
          optionsCorsHeaders
      ))
    }
  }).withHttpResponseHeadersMapped { headers =>
    allowOriginHeader :: headers

  }
  }
}

/**
 * REST server exposing the following calls:
 *
 * - /register
 * - /query
 * - /schemas
 *
 * See the wiki on the github repo for details on the rest interface
 * @param executorArg scala or spark executor. Currently, on Scala executor is implemented.
 */
class RawRestServer(executorArg: String, storageDirCmdOption: Option[String]) extends ActorPoolRoutingApp with StrictLogging with CORSSupport {
  // TODO: Add CORS headers globally to all paths. The error responses generated by Spray do not contain these headers
  // so we get a CORS warning on the browser whenever a request fails before getting to our route.

  import DefaultJsonMapper._
  import RawRestServer._

  val rawServer = {
    val storageDir: Path = storageDirCmdOption match {
      case None =>
        try {
          Paths.get(ConfigFactory.load().getString("raw.datadir"))
        } catch {
          case ex: ConfigException.Missing => StorageManager.defaultStorageDir
        }
      case Some(dir) => Paths.get(dir)
    }
    new RawServer(storageDir)
  }

  val sc: Option[SparkContext] = executorArg match {
    case "scala" => logger.info("Using Scala-only executor"); None
    case "spark" =>
      logger.info("Using Spark")
      lazy val sc: SparkContext = {
        Thread.currentThread().setContextClassLoader(CodeGenerator.rawClassloader)
        logger.info("Starting SparkContext with configuration:\n{}", DefaultSparkConfiguration.conf.toDebugString)
        new SparkContext("local[4]", "test", DefaultSparkConfiguration.conf)
      }
      Some(sc)
    case exec@_ =>
      throw new IllegalArgumentException(s"Invalid executor: $exec. Valid options: [scala, spark]")
  }

  // val restService = context.actorOf(RoundRobinPool(5).props(Props[TestActor]), "router")
  implicit val system = ActorSystem("simple-routing-app")

  private[this] def createJsonResponse(queryError: QueryError): String = {
    val response = new CompilationErrorResponse(queryError.getClass.getSimpleName, queryError)
    mapper.writeValueAsString(response)
  }

  private[this] def createJsonResponse(exception: Throwable): String = {
    val sw = new StringWriter()
    exception.printStackTrace(new PrintWriter(sw))
    val response = new ExceptionResponse(exception.getClass.getName, exception.getMessage, sw.toString)
    mapper.writeValueAsString(response)
  }


  def exceptionHandler(implicit log: LoggingContext) =
    ExceptionHandler {
      case e: ClientErrorException =>
        cors {
          requestUri { uri =>
            logger.warn(s"Request to $uri failed", e)
            respondWithMediaType(MediaTypes.`application/json`) {
              complete(StatusCodes.BadRequest, createJsonResponse(e))
            }
          }
        }
      case e: CompilationException =>
        cors {
          requestUri { uri =>
            logger.warn(s"Request to $uri failed: ${e.queryError}")
            respondWithMediaType(MediaTypes.`application/json`) {
              val errorAsJson = createJsonResponse(e.queryError)
              e.queryError match {
                case se: SemanticErrors =>
                  complete(StatusCodes.BadRequest, errorAsJson)
                case pe: ParserError =>
                  complete(StatusCodes.BadRequest, errorAsJson)
                case ie: InternalError =>
                  complete(StatusCodes.InternalServerError, errorAsJson)
                case _ => {
                  logger.info(s"No match found for query error class: ${e.queryError}")
                  complete(StatusCodes.InternalServerError, errorAsJson)
                }
              }
            }
          }
        }
      // Generate an internal error response for any other unknown/unexpected exception.
      case e: Throwable =>
        cors {
          requestUri { uri =>
            logger.warn(s"Request to $uri failed.", e)
            respondWithMediaType(MediaTypes.`application/json`) {
              complete(StatusCodes.InternalServerError, createJsonResponse(e))
            }
          }
        }
      // Any other exception will be handled by Spray and return a 500 status code.
    }

  def start(): Future[Bound] = {
    val queryPath = "query"
    val registerPath = "register-file"
    val schemasPath = "schemas"
    // TODO get endpoints from the route
    logger.info(s"Listening on localhost:$port/{$registerPath,$queryPath,$schemasPath}")

    val future: Future[Bound] = startServer("0.0.0.0", port = port) {
      handleExceptions(exceptionHandler) {
        cors {
          (path(queryPath) & post) {
            entity(as[String]) { body =>
              val request = queryRequestReader.readValue[QueryRequest](body)
              logger.info(s"Query request: $request")
              // TODO: Send query language in request
              val queryLanguage = QueryLanguages("qrawl")
              val rawUser = DropboxClient.getUserName(request.token)
              val query = request.query
              val result = rawServer.doQuery(queryLanguage, query, rawUser)
              // return jsonify(dict(success=True, output=r['output'], execution_time=r['execution_time'], compile_time=r['compile_time']))
              val response = Map("success" -> true, "output" -> result, "execution_time" -> 0, "compile_time" -> 0)
              val serializedResponse = mapper.writeValueAsString(response)
              logger.info("Query succeeded. Returning result: " + serializedResponse.take(100))
              respondWithMediaType(MediaTypes.`application/json`) {
                complete(serializedResponse)
              }
            }
          }
        } ~
          (path(registerPath) & post) {
            cors {
              entity(as[String]) { body =>
                val request = registerRequestReader.readValue[RegisterFileRequest](body)
                doRegisterFile(request)
                respondWithMediaType(MediaTypes.`application/json`) {
                  val response = Map("success" -> true, "name" -> request.name)
                  complete(mapper.writeValueAsString(response))
                }
              }
            }
          } ~
          (path(schemasPath) & post) {
            cors {
              entity(as[String]) { body =>
                val request = schemaRequestReader.readValue[SchemaRequest](body)
                val schemas: Seq[String] = doSchemas(request.module, request.token)
                respondWithMediaType(MediaTypes.`application/json`) {
                  val response = Map("success" -> true, "schemas" -> schemas)
                  complete(mapper.writeValueAsString(response))
                }
              }
            }
          }
      }
    }
    future
  }

  def doSchemas(module: String, token: String): Seq[String] = {
    logger.info(s"Module: $module, token: $token")
    val rawUser = DropboxClient.getUserName(token)
    logger.info(s"Returning schemas for $rawUser")
    rawServer.getSchemas(rawUser)
  }

  // TODO: Convert files with - to have _
  def doRegisterFile(request: RegisterFileRequest) = {
    logger.info(s"doRegisterFile: $request")
    val stagingDirectory = Files.createTempDirectory("raw-stage")
    try {
      val localFile = stagingDirectory.resolve(request.name + "." + request.`type`)
      DropboxClient.downloadFile(request.url, localFile)
      PythonShellExecutor.inferSchema(localFile, request.`type`, request.name)
      // Register the schema
      rawServer.registerSchema(request.name, stagingDirectory, DropboxClient.getUserName(request.token))
    } finally {
      try {
        Files.deleteIfExists(stagingDirectory)
      } catch {
        case ex: DirectoryNotEmptyException => logger.warn("Could not delete directory", ex)
      }

    }
  }

  def stop(): Unit = {
    logger.info("Shutting down")
    system.shutdown()
  }
}

object RawRestServerMain extends StrictLogging {
  def main(args: Array[String]) {
    object Conf extends ScallopConf(args) {
      banner("Scala/Spark OQL execution server")
      val executor: ScallopOption[String] = opt[String]("executor", default = Some("scala"), short = 'e')
      val storageDir: ScallopOption[String] = opt[String]("storage-dir", default = None, short = 's')
    }

    val restServer = new RawRestServer(Conf.executor(), Conf.storageDir.get)
    restServer.start()
  }
}
